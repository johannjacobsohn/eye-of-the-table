/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteRouteImport } from './routes/authenticated/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SignInSplatRouteImport } from './routes/sign-in.$'
import { Route as AuthenticatedHelloPageRouteImport } from './routes/authenticated/HelloPage'
import { Route as authLoginRouteImport } from './routes/(auth)/login'

const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/authenticated',
  path: '/authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInSplatRoute = SignInSplatRouteImport.update({
  id: '/sign-in/$',
  path: '/sign-in/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedHelloPageRoute = AuthenticatedHelloPageRouteImport.update({
  id: '/HelloPage',
  path: '/HelloPage',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/authenticated/HelloPage': typeof AuthenticatedHelloPageRoute
  '/sign-in/$': typeof SignInSplatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/authenticated/HelloPage': typeof AuthenticatedHelloPageRoute
  '/sign-in/$': typeof SignInSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/authenticated/HelloPage': typeof AuthenticatedHelloPageRoute
  '/sign-in/$': typeof SignInSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/authenticated'
    | '/login'
    | '/authenticated/HelloPage'
    | '/sign-in/$'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/authenticated'
    | '/login'
    | '/authenticated/HelloPage'
    | '/sign-in/$'
  id:
    | '__root__'
    | '/'
    | '/authenticated'
    | '/(auth)/login'
    | '/authenticated/HelloPage'
    | '/sign-in/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  SignInSplatRoute: typeof SignInSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/authenticated': {
      id: '/authenticated'
      path: '/authenticated'
      fullPath: '/authenticated'
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in/$': {
      id: '/sign-in/$'
      path: '/sign-in/$'
      fullPath: '/sign-in/$'
      preLoaderRoute: typeof SignInSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/authenticated/HelloPage': {
      id: '/authenticated/HelloPage'
      path: '/HelloPage'
      fullPath: '/authenticated/HelloPage'
      preLoaderRoute: typeof AuthenticatedHelloPageRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AuthenticatedRouteRouteChildren {
  AuthenticatedHelloPageRoute: typeof AuthenticatedHelloPageRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedHelloPageRoute: AuthenticatedHelloPageRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  authLoginRoute: authLoginRoute,
  SignInSplatRoute: SignInSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
